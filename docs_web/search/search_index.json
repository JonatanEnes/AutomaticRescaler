{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This framework, Serverless Containers, is able to dynamically scale a container resource limit ( e.g., CPU, Memory, disk and network ) in order to adapt them to the real usage , at any moment and in real-time. For a brief summary of this tool you can visit its homepage website. In order to see data from real experiments where this tool was used, you can visit this demo . For the source code you can visit its GitHub . Serverless Containers has also been the subject of a publication in Future Generation Computer Systems (FGCS) , which is available online . In this publication the framework is thoroughly described with all technichal detail, and several experiment examples are also presented. This documentation webpage gives a more detailed description of the framework but without delving into technichal details as in the available publication. The webpage has been structured with the following sections: Use case : This section summarizes the core use case of this framework with a simple example. Architecture : Which briefly describes the architecture and design used. Deployment : In this section it is described how to deploy the framework overall. Some guidelines are also provided. Source Code (external) : If you are interested on the low-level code and code documentation. Sponsors : Some comments on the backers and sponsors of this framework.","title":"Introduction"},{"location":"architecture/","text":"High-level diagram This framework has been designed using a microservice approach in order to ease its development as well as to create speciliazed units that can be reused or improved in isolation. In addition, by using this paradigm it is also possible to implement framework that inherently presents an internal parallelism that is useful when dealing with scenarios that require responsiveness, such as is the case with real-time and on-demand resource scaling. The next image shows a high-level diagram of the scenario on which the framework is deployed: [1] Beginning with the framework's inputs , there are two: 1) the actions, both performed by an user or by another program through the API, that control the framework's behavior; and, 2) the resource monitoring time series, currently provided by an external framework ( BDWatchdog ), that are used in the policy decision for the resource scaling operations. [2] Continuing with this serverlesss containers framework , which groups several microservices, some of which are placed on the controlled hosts. The framework's inner workings are further specified on the following sections. [3] And finishing with the controlled infrastructure , which usually consists of several hosts running each one several instances of containers. Currently only the containers backed by the cgroups file system are supported by design and, more specifically, Linux Containers (LXC) have been used and thus tested to work with this framewok. Design As previously stated, the design followed to create the architecture of this framework uses several microservices that communicate and exchange information. The following image shows a high-level diagram of the microservices layout: When it comes to the microservices Microservices Resource scaling policy More info If what is described on this documentation webpage does not answer all of your doubts regarding the technical details, or simply is not enough for you and you want the specifics, this framework has been published on a full-length paper on the FGCS journal. If you don't have access to the journal paper, you can still access the preprint on this link .","title":"Architecture"},{"location":"architecture/#high-level-diagram","text":"This framework has been designed using a microservice approach in order to ease its development as well as to create speciliazed units that can be reused or improved in isolation. In addition, by using this paradigm it is also possible to implement framework that inherently presents an internal parallelism that is useful when dealing with scenarios that require responsiveness, such as is the case with real-time and on-demand resource scaling. The next image shows a high-level diagram of the scenario on which the framework is deployed: [1] Beginning with the framework's inputs , there are two: 1) the actions, both performed by an user or by another program through the API, that control the framework's behavior; and, 2) the resource monitoring time series, currently provided by an external framework ( BDWatchdog ), that are used in the policy decision for the resource scaling operations. [2] Continuing with this serverlesss containers framework , which groups several microservices, some of which are placed on the controlled hosts. The framework's inner workings are further specified on the following sections. [3] And finishing with the controlled infrastructure , which usually consists of several hosts running each one several instances of containers. Currently only the containers backed by the cgroups file system are supported by design and, more specifically, Linux Containers (LXC) have been used and thus tested to work with this framewok.","title":"High-level diagram"},{"location":"architecture/#design","text":"As previously stated, the design followed to create the architecture of this framework uses several microservices that communicate and exchange information. The following image shows a high-level diagram of the microservices layout: When it comes to the microservices","title":"Design"},{"location":"architecture/#microservices","text":"","title":"Microservices"},{"location":"architecture/#resource-scaling-policy","text":"","title":"Resource scaling policy"},{"location":"architecture/#more-info","text":"If what is described on this documentation webpage does not answer all of your doubts regarding the technical details, or simply is not enough for you and you want the specifics, this framework has been published on a full-length paper on the FGCS journal. If you don't have access to the journal paper, you can still access the preprint on this link .","title":"More info"},{"location":"deployment/","text":"","title":"Deployment"},{"location":"sponsors/","text":"Sponsors The Serverless Containers framework has been developed as part of a PhD thesis from the candidate Jonatan Enes . This frameworks uses another in-house made framework, BDWatchdog , for the resource monitoring requirement, and is in turn used for a specific experimentation scenario for the energy control and capping of containers more info . This PhD thesis is currently being carried out at Universidade da Coru\u00f1a (Spain), in the Computer Architecture group of the Computer Engineering department. Finally, this work has also been possible thanks to the collaboration and funding of several organizations as next presented:","title":"Sponsors"},{"location":"sponsors/#sponsors","text":"The Serverless Containers framework has been developed as part of a PhD thesis from the candidate Jonatan Enes . This frameworks uses another in-house made framework, BDWatchdog , for the resource monitoring requirement, and is in turn used for a specific experimentation scenario for the energy control and capping of containers more info . This PhD thesis is currently being carried out at Universidade da Coru\u00f1a (Spain), in the Computer Architecture group of the Computer Engineering department. Finally, this work has also been possible thanks to the collaboration and funding of several organizations as next presented:","title":"Sponsors"},{"location":"use_case/","text":"This framework is used to scale the resources of a container , or a group of containers, both dynamically and in real time , so that the limits placed on such resources evolve to be just above the usage. On the one hand, from a traditional virtual machine and Cloud perspective, this approach is similar to the on-demand and pay per usage resource provisioning. The main difference would be that on this case, the limits can be changed multiple times during execution instead of being specified only once at the instantiation phase. On the other hand, this approach is also close to the serverless paradigm on the fact that the container, and all of the processes running on it, can not trust the pool of resources exposed to them as such resources limits can vary according to their usage (e.g., if the CPU usage increases, the CPU limit should also be raised via adding more cores). Combining both of these approaches, this framework comes up with a solution so that virtual infrastructure units, such as software containers (e.g., LXC, Docker), can benefit from having a resource management that implements a serverless scenario. Among other perks, the main benefits of this framework include: A higher resource efficiency, those containers with a low resource usage will also be given a smaller set of resources, while those with a higher usage, will have a larger set of resources available over time. Pay per usage billing policy, in the same way as the Cloud platforms, only the used resources should be considered for billing. The flexibility of supporting and using containers, which are virtually highly similar to virtual machines and, thus, can be used to deploy a wide arrange of applications. The next image shows the evolution of the CPU limit placed on a container over time.","title":"Use case"}]}